import { useState, useCallback, useEffect, useRef } from 'react'



function App() {
  const [length, setLength] = useState(8)
  const [numberAllowed, setNumberAllowed] = useState(false);
  const [charAllowed, setCharAllowed] = useState(false)
  const [password, setPassword] = useState("")

  //useRef hook
  const passwordRef = useRef(null)

  const passwordGenerator = useCallback(() => {
    let pass = ""
    let str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
    if (numberAllowed) str += "0123456789"
    if (charAllowed) str += "!@#$%^&*-_+=[]{}~`"

    for (let i = 1; i <= length; i++) {
      let char = Math.floor(Math.random() * str.length + 1)
      pass += str.charAt(char)
      
    }

    setPassword(pass)


  }, [length, numberAllowed, charAllowed, setPassword])

  const copyPasswordToClipboard = useCallback(() => {
    passwordRef.current?.select();
    passwordRef.current?.setSelectionRange(0, 999);
    window.navigator.clipboard.writeText(password)
  }, [password])

  useEffect(() => {
    passwordGenerator()
  }, [length, numberAllowed, charAllowed, passwordGenerator])
  return (
    
    <div className="w-full max-w-md mx-auto shadow-md rounded-lg px-4 py-3 my-8 bg-gray-800 text-orange-500">
      <h1 className='text-white text-center my-3'>Password generator</h1>
    <div className="flex shadow rounded-lg overflow-hidden mb-4">
        <input
            type="text"
            value={password}
            className="outline-none w-full py-1 px-3"
            placeholder="Password"
            readOnly
            ref={passwordRef}
        />
        <button
        onClick={copyPasswordToClipboard}
        className='outline-none bg-blue-700 text-white px-3 py-0.5 shrink-0'
        >copy</button>
        
    </div>
    <div className='flex text-sm gap-x-2'>
      <div className='flex items-center gap-x-1'>
        <input 
        type="range"
        min={6}
        max={100}
        value={length}
         className='cursor-pointer'
         onChange={(e) => {setLength(e.target.value)}}
          />
          <label>Length: {length}</label>
      </div>
      <div className="flex items-center gap-x-1">
      <input
          type="checkbox"
          defaultChecked={numberAllowed}
          id="numberInput"
          onChange={() => {
              setNumberAllowed((prev) => !prev);
          }}
      />
      <label htmlFor="numberInput">Numbers</label>
      </div>
      <div className="flex items-center gap-x-1">
          <input
              type="checkbox"
              defaultChecked={charAllowed}
              id="characterInput"
              onChange={() => {
                  setCharAllowed((prev) => !prev )
              }}
          />
          <label htmlFor="characterInput">Characters</label>
      </div>
    </div>
</div>
    
  )
}

export default App


/////////////////////////////////////////////////////
Initial Values
Assume the following initial values:

length = 6 (the desired length of the password).
numberAllowed = true (numbers are allowed).
charAllowed = true (special characters are allowed).
Code Execution
Start of useCallback(): The function passwordGenerator is wrapped in useCallback(). It will execute whenever length, numberAllowed, or charAllowed change.

Initial String Setup: The variable str is initialized with all uppercase and lowercase letters:

js
Copy code
let str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
Adding Numbers: Since numberAllowed is true, numbers "0123456789" are appended to str:

js
Copy code
str += "0123456789"; 
Now str becomes:

arduino
Copy code
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
Adding Special Characters: Since charAllowed is true, special characters "!@#$%^&*-_+=[]{}~"are also appended tostr`:

js
Copy code
str += "!@#$%^&*-_+=[]{}~`";
Now str becomes:

makefile
Copy code
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*-_+=[]{}~`"
Generating the Password: The for loop runs from 1 to length (which is 6 in this case), and in each iteration, a random character from the string str is selected.

Iteration Details:
First Iteration (i = 1):

let char = Math.floor(Math.random() * str.length);
Suppose Math.random() returns 0.56. After calculation, char = Math.floor(0.56 * 80) = 44 (since str.length = 80).
The 44th character in str is "o". So, pass = "o".
Second Iteration (i = 2):

Suppose Math.random() returns 0.23. After calculation, char = Math.floor(0.23 * 80) = 18.
The 18th character in str is "S". Now, pass = "oS".
Third Iteration (i = 3):

Suppose Math.random() returns 0.75. After calculation, char = Math.floor(0.75 * 80) = 60.
The 60th character in str is "4". Now, pass = "oS4".
Fourth Iteration (i = 4):

Suppose Math.random() returns 0.12. After calculation, char = Math.floor(0.12 * 80) = 9.
The 9th character in str is "I". Now, pass = "oS4I".
Fifth Iteration (i = 5):

Suppose Math.random() returns 0.90. After calculation, char = Math.floor(0.90 * 80) = 72.
The 72nd character in str is "%". Now, pass = "oS4I%".
Sixth Iteration (i = 6):

Suppose Math.random() returns 0.32. After calculation, char = Math.floor(0.32 * 80) = 25.
The 25th character in str is "Z". Now, pass = "oS4I%Z".
Setting the Password: After the loop ends, pass holds the value "oS4I%Z". This value is passed to setPassword(pass), which updates the password state.